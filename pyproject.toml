[tool.poetry]
name = "ssb-fame-to-python"
version = "1.0.4"
description = "SSB Fame To Python"
authors = ["Magnus Kv√•le Helliesen <mkh@ssb.no>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/statisticsnorway/ssb-fame-to-python"
repository = "https://github.com/statisticsnorway/ssb-fame-to-python"
documentation = "https://statisticsnorway.github.io/ssb-fame-to-python"
packages = [{ include = "fython", from = "src" }]
classifiers = ["Development Status :: 4 - Beta"]

[tool.poetry.urls]
Changelog = "https://github.com/statisticsnorway/ssb-fame-to-python/releases"

[tool.poetry.dependencies]
python = "^3.6.2"
click = ">=8.0.1"
pandas-stubs = [
    {version = ">=1.1.0.14", python = ">=3.6.2,<3.9"},
    {version = ">=2.1.4.231227", python = "^3.9"}
]
pandas = [
    {version = ">=1.1.5", python = ">=3.6.2,<3.9"},
    {version = ">=2.2.0", python = "^3.9"}
]

[tool.poetry.group.dev.dependencies]
pygments = { version = ">=2.10.0", python = "^3.9" }
black = { extras = ["jupyter"], version = ">=23.1.0", python = "^3.9" }
coverage = { extras = ["toml"], version = ">=6.2", python = "^3.9" }
darglint = { version = ">=1.8.1", python = "^3.9" }
furo = { version = ">=2021.11.12", python = "^3.9" }
mypy = { version = ">=0.930", python = "^3.9" }
pre-commit = { version = ">=2.16.0", python = "^3.9" }
pre-commit-hooks = { version = ">=4.1.0", python = "^3.9" }
ruff = { version = ">=0.0.284", python = "^3.9" }
pytest = { version = ">=6.2.5", python = "^3.9" }
sphinx = { version = ">=6.2.1", python = "^3.9" }
sphinx-autobuild = { version = ">=2021.3.14", python = "^3.9" }
sphinx-autodoc-typehints = { version = ">=1.24.0", python = "^3.9" }
sphinx-click = { version = ">=3.0.2", python = "^3.9" }
typeguard = { version = ">=2.13.3", python = "^3.9" }
xdoctest = { extras = ["colors"], version = ">=0.15.10", python = "^3.9" }
myst-parser = { version = ">=0.16.1", python = "^3.9" }
pytest-mock = { version = ">=3.12.0", python = "^3.9" }

[tool.pytest.ini_options]
pythonpath = ["src"]

[tool.poetry.scripts]
ssb-fame-to-python = "fython.__main__:main"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["fython", "tests"]
relative_files = true

[tool.coverage.report]
show_missing = true
fail_under = 50

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true

[tool.ruff]
force-exclude = true  # Apply excludes to pre-commit
show-fixes = true
src = ["src", "tests"]
target-version = "py37"  # Minimum Python version supported
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
extend-exclude = [
    "__pycache__",
    "old",
    ".ipynb_checkpoints",
    "noxfile.py",
    "docs/conf.py",
]

# Ruff rules may be customized as desired: https://docs.astral.sh/ruff/rules/
[tool.ruff.lint]
select = [
    "A",    # prevent using keywords that clobber python builtins
    "ANN",  # check type annotations
    "B",    # bugbear: security warnings
    "D",    # documentation
    "E",    # pycodestyle
    "F",    # pyflakes
    "ISC",  # implicit string concatenation
    "I",    # sort imports
    "UP",   # alert you when better syntax is available in your python version
    "RUF",  # the ruff developer's own rules
]
ignore = [
    "ANN101", # Supress missing-type-self.
    "ANN102", # Supress missing-type-cls.
    "ANN202", # Don't requiere return type annotation for private functions.
    "ANN401", # Allow type annotation with type Any.
    "D100",   # Supress undocumented-public-module. Only doc of public api required.
    "E402",   # Supress module-import-not-at-top-of-file, needed in jupyter notebooks.
    "E501",   # Supress line-too-long warnings: trust black's judgement on this one.
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "numpy"  # You can also use "numpy".

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "validator", "root_validator", "pydantic.validator"]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]
"**/tests/*" = [
    "ANN001",  # type annotations don't add value for test functions
    "ANN002",  # type annotations don't add value for test functions
    "ANN003",  # type annotations don't add value for test functions
    "ANN201",  # type annotations don't add value for test functions
    "ANN204",  # type annotations don't add value for test functions
    "ANN205",  # type annotations don't add value for test functions
    "ANN206",  # type annotations don't add value for test functions
    "D100",    # docstrings are overkill for test functions
    "D101",
    "D102",
    "D103",
    "S101",    # asserts are encouraged in pytest
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
